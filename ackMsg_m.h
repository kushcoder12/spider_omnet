//
// Generated file, do not edit! Created by nedtool 5.6 from ackMsg.msg.
//

#ifndef __ACKMSG_M_H
#define __ACKMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>ackMsg.msg:18</tt> by nedtool.
 * <pre>
 * packet ackMsg
 * {
 *     int transactionId;
 *     int receiver;
 *     int htlcIndex;
 *     int pathIndex;
 *     double timeSent;
 *     bool isSuccess; //status, true for success, false for failure
 *     int failedHopNum;
 *     string secret = "";
 *     double amount;
 *     int priorityClass;
 *     bool hasTimeOut;
 *     double timeOut;
 *     double largerTxnId;
 *     bool isMarked;
 *     double timeAttempted;
 * }
 * </pre>
 */
class ackMsg : public ::omnetpp::cPacket
{
  protected:
    int transactionId;
    int receiver;
    int htlcIndex;
    int pathIndex;
    double timeSent;
    bool isSuccess;
    int failedHopNum;
    ::omnetpp::opp_string secret;
    double amount;
    int priorityClass;
    bool hasTimeOut;
    double timeOut;
    double largerTxnId;
    bool isMarked;
    double timeAttempted;

  private:
    void copy(const ackMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ackMsg&);

  public:
    ackMsg(const char *name=nullptr, short kind=0);
    ackMsg(const ackMsg& other);
    virtual ~ackMsg();
    ackMsg& operator=(const ackMsg& other);
    virtual ackMsg *dup() const override {return new ackMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getTransactionId() const;
    virtual void setTransactionId(int transactionId);
    virtual int getReceiver() const;
    virtual void setReceiver(int receiver);
    virtual int getHtlcIndex() const;
    virtual void setHtlcIndex(int htlcIndex);
    virtual int getPathIndex() const;
    virtual void setPathIndex(int pathIndex);
    virtual double getTimeSent() const;
    virtual void setTimeSent(double timeSent);
    virtual bool getIsSuccess() const;
    virtual void setIsSuccess(bool isSuccess);
    virtual int getFailedHopNum() const;
    virtual void setFailedHopNum(int failedHopNum);
    virtual const char * getSecret() const;
    virtual void setSecret(const char * secret);
    virtual double getAmount() const;
    virtual void setAmount(double amount);
    virtual int getPriorityClass() const;
    virtual void setPriorityClass(int priorityClass);
    virtual bool getHasTimeOut() const;
    virtual void setHasTimeOut(bool hasTimeOut);
    virtual double getTimeOut() const;
    virtual void setTimeOut(double timeOut);
    virtual double getLargerTxnId() const;
    virtual void setLargerTxnId(double largerTxnId);
    virtual bool getIsMarked() const;
    virtual void setIsMarked(bool isMarked);
    virtual double getTimeAttempted() const;
    virtual void setTimeAttempted(double timeAttempted);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ackMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ackMsg& obj) {obj.parsimUnpack(b);}


#endif // ifndef __ACKMSG_M_H

